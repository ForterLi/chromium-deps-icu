diff --git a/patches/measunit_impl_move-template.patch b/patches/measunit_impl_move-template.patch
new file mode 100644
index 00000000..e69de29b
diff --git a/source/i18n/measunit_impl.h b/source/i18n/measunit_impl.h
index f88d9000..2c957c62 100644
--- a/source/i18n/measunit_impl.h
+++ b/source/i18n/measunit_impl.h
@@ -20,6 +20,7 @@ class LongNameHandler;
 }
 } // namespace number
 
+#if 0
 // Export an explicit template instantiation of the LocalPointer that is used as a
 // data member of MeasureUnitImpl.
 // (When building DLLs for Windows this is required.)
@@ -35,6 +36,7 @@ template class U_I18N_API LocalPointer<MeasureUnitImpl>;
 #pragma warning(pop)
 #endif
 #endif
+#endif
 
 static const char16_t kDefaultCurrency[] = u"XXX";
 static const char kDefaultCurrency8[] = "XXX";
@@ -187,6 +189,7 @@ struct U_I18N_API SingleUnitImpl : public UMemory {
 // Forward declaration
 struct MeasureUnitImplWithIndex;
 
+#if 0
 // Export explicit template instantiations of MaybeStackArray, MemoryPool and
 // MaybeStackVector. This is required when building DLLs for Windows. (See
 // datefmt.h, collationiterator.h, erarules.h and others for similar examples.)
@@ -198,6 +201,7 @@ template class U_I18N_API MaybeStackArray<MeasureUnitImplWithIndex *, 8>;
 template class U_I18N_API MemoryPool<MeasureUnitImplWithIndex, 8>;
 template class U_I18N_API MaybeStackVector<MeasureUnitImplWithIndex, 8>;
 #endif
+#endif
 
 /**
  * Internal representation of measurement units. Capable of representing all complexities of units,
